# For manual creation/update use:
# aws cloudformation deploy --stack-name ECS-task --template-file ecs-task.yml --capabilities CAPABILITY_IAM
AWSTemplateFormatVersion: '2010-09-09'

Description: Deploy a service on ECS, hosted in a private subnet, but accessible via a public load balancer.

Parameters:

  VPCStackName:
    Type: String
    Default: DevVPC
    Description: The name of the parent networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ECSStackName:
    Type: String
    Default: ECS-cluster
    Description: The name of the parent ECS cluster stack.

  ALBStackName:
    Type: String
    Default: alb
    Description: The name of the connected ALB stack.

  ServiceName:
    Type: String
    Default: dropwizard
#    Default: snakes
    Description: A name for the service.

  ImageUrl:
    Type: String
    Default: 054017840000.dkr.ecr.us-east-1.amazonaws.com/devopsa3:tomcat
#    Default: 054017840000.dkr.ecr.us-east-1.amazonaws.com/snakes:latest
#    Default: 054017840000.dkr.ecr.us-east-1.amazonaws.com/aveli-test:latest
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service

  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to

  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run.

  MinCapacity:
    Type: Number
    Default: 1
    Description: How many copies of containers have to be run minimum.
    ConstraintDescription: Must be >= 1

  MaxCapacity:
    Type: Number
    Default: 10
    Description: How many copies of containers have to be run maximum.
    ConstraintDescription: Must be >= MinCapacity

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the services containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

  DeploymentColor:
    Type: String
    Default: "Blue"
    Description: Must be Blue or Green, depends on the situation. If there is already Blue stack,
                   and you are going to deploy new version - use Green here.
    AllowedValues: [ 'Blue','Green' ]

Conditions:

  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]
  IsDeploymentBlue: !Equals [!Ref 'DeploymentColor', 'Blue']

Resources:

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn:
        Fn::ImportValue: !Sub "${ECSStackName}:ECSTaskExecutionRole"
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue: !Sub "${ECSStackName}:ClusterName"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub "${ECSStackName}:EcsHostSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet0"
            - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn:
            Fn::If:
              - 'IsDeploymentBlue'
              - Fn::ImportValue: !Sub "${ALBStackName}-TargetGroupBlue"
              - Fn::ImportValue: !Sub "${ALBStackName}-TargetGroupGreen"

  ScalableTargetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: ecs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:DescribeAlarms'
            Resource: '*'

  ScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MinCapacity: !Ref MinCapacity
      MaxCapacity: !Ref MaxCapacity
      ResourceId: !Sub
      - 'service/${Cluster}/${Service}'
      - Cluster:
          Fn::ImportValue: !Sub "${ECSStackName}:ClusterName"
        Service: !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'ScalableTargetRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs

  ScalePolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scalepolicy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 60
