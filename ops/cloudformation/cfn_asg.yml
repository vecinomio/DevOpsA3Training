# For manual creation/update use:
# aws cloudformation deploy --stack-name webAppASG                             \
#                           --template-file ops/cloudformation/cfn_asg.yml     \
#                           --parameter-overrides                              \
#                             VPCStackName=DevVPC | ProdVPC                    \
#                             PuppetScriptVersion=<version>                    \
#                             HostedZoneName=<example.com>                     \
#                           --profile <profile>                                \
#                           --capabilities CAPABILITY_NAMED_IAM
---
AWSTemplateFormatVersion: "2010-09-09"

Description: "ASG for private subnet."

Parameters:

  VPCStackName:
    Type: String
    AllowedValues: [ DevVPC, ProdVPC ]

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: devopsa3
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Type: String
    Description: Type of EC2 instance.
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.

  WebASGCapacity:
    Description: The number of ec2 instances will be runned into ASG
    Type: String
    Default: "2"
    ConstraintDescription: Must be positive integer or zero

  S3Path:
    Type: String
    Description: The S3 path
    Default: devopsa3/scripts

  PuppetScriptVersion:
    Type: String
    Description: Bootstrap script version

  HostedZoneName:
    Type: String
    Description: Project hosted zone name.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80 # Amazon Linux 2
    us-west-1:
      AMI: ami-0245d318c6788de52 # Amazon Linux 2


Resources:
  webAutoScalingSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP, HTTPS, SSH access
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-SG"

  webAppRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}Profile"
      Path: "/"
      Roles:
        - !Ref webAppRole

  webAppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}Policy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:GetObject

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Name: tgWeb
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
      Tags:
      - Key: 'Name'
        Value: 'tgWeb'
      - Key: 'Port'
        Value: 8080

  WebListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'www.${HostedZoneName}'
      ListenerArn: !ImportValue alb-HttpsListener-ARN
      Priority: 2

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          aws s3 cp "s3://${S3Path}/web-app-userdata.sh" .
          /bin/bash web-app-userdata.sh ${S3Path} ${pupver} ${AWS::StackName} ${AWS::Region}
          rm web-app-userdata.sh
        - pupver: !Ref PuppetScriptVersion
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref webAppRoleProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref webAutoScalingSecurityGroup

  webAppAutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref webAppASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Sub
          - ${albarn}/${albtgarn}
          - albarn: !Select [1, !Split [":loadbalancer/",  !ImportValue "alb-ALB-ARN"]]
            albtgarn: !Select [5, !Split [":", !Ref WebTargetGroup]]
        TargetValue: 100.0

  webAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webAppASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: !Ref WebASGCapacity
      TargetGroupARNs:
        - !Ref WebTargetGroup
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet0"
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-ASG"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebASGCapacity
        Timeout: "PT20M"

  MainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId:
          Fn::ImportValue: alb-Associate-HostedZoneID
        DNSName:
          Fn::ImportValue: alb-ALB-DNSName
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub '${HostedZoneName}.'
      Type: A

  WwwRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'www.${HostedZoneName}.'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - Fn::ImportValue: alb-ALB-DNSName
