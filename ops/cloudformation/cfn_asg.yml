# For manual creation/update use:
# aws cloudformation deploy --stack-name web-asg-layer                     \
#                           --template-file ops/cloudformation/cfn_asg.yml \
#                           --parameter-overrides                          \
#                             VPCStackName=DevVPC | ProdVPC                \
#                             HostedZoneName=<HostedZoneName>              \
#                           --tags                                      \
#                             t1=v1                                     \
#                             t2=v2                                     \
#                           --region <region>                           \
#                           --profile <profile>
---
AWSTemplateFormatVersion: "2010-09-09"

Description: "ASG for private subnet."

Parameters:
  VPCStackName:
    Type: String
    AllowedValues: [ DevVPC, ProdVPC ]
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: aveli-asg
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  HTTPLocation:
    Description: The IP address range that can be used for HTTP/HTTPS requests
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  InstanceType:
    Type: String
    Description: Type of EC2 instance.
    Default: t2.micro
#    AllowedValues: [ t2.micro, t2.small, t2.medium ]
    ConstraintDescription: Must be a valid EC2 instance type.
  VolumeSize:
    Type: Number
    Description: Volume-size of persistent EBS for Bastion-host in Gb
    Default: 10
  HostedZoneName:
    Type: String
    Description: Project hosted zone.
#    Default: "devopsa3.me.uk."
  SSLCertificate:
    Type: String
    Default: 'arn:aws:acm:us-east-1:054017840000:certificate/98dbbe8d-d6a8-47c0-ad7a-9a25928a806e'
    Description: ARN of Certificate attached to ELB

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80 # Amazon Linux 2
    us-west-1:
      AMI: ami-0245d318c6788de52 # Amazon Linux 2

Resources:
  webAutoScalingSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP, HTTPS, SSH access
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref HTTPLocation
        - IpProtocol: tcp
          FromPort: '81'
          ToPort: '81'
          CidrIp: !Ref HTTPLocation

  webLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP, HTTPS, SSH access
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref HTTPLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref HTTPLocation

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            echo -------------------------START-----------------------------
            yum -y update
            yum -y install httpd
            PrivateIP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`
            echo "<html><body bgcolor=black><center><font color=gold> \
            <h1>Server IP is: $PrivateIP</h1></center> \
            </body></html>" > /var/www/html/index.html
            echo "
            Listen 81
            <VirtualHost *:81>
            RewriteEngine On
            RewriteCond %{HTTP:X-Forwarded-Proto} =http
            RewriteRule .* https://%{HTTP:Host}%{REQUEST_URI} [L,R=permanent]
            </VirtualHost>
            " > /etc/httpd/conf.d/redirect81to443.conf
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            echo -------------------------END-----------------------------
      AssociatePublicIpAddress: "false"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref webAutoScalingSecurityGroup

  webASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      LoadBalancerNames:
        - Ref: WebLoadBalancer
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet0"
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
      Tags:
        - Key: "Name"
          Value: "aveli-ASG"
          PropagateAtLaunch: true

  WebLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
      SecurityGroups:
        - Ref: webLoadBalancerSecurityGroup
      Listeners:
        - InstancePort: '81'
          LoadBalancerPort: '80'
          Protocol: HTTP
        - InstancePort: '80'
          InstanceProtocol: HTTP
          LoadBalancerPort: '443'
          Protocol: HTTPS
          SSLCertificateId: !Ref SSLCertificate
      HealthCheck:
          HealthyThreshold: 10
          Interval: 30
          Target: "HTTP:80/"
          Timeout: 5
          UnhealthyThreshold: 2
      Tags:
        - Key: 'Name'
          Value: 'web-LB'
        - Key: 'Environment'
          Value: 'dev'

  WebDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Sub 'web-app.${HostedZoneName}'
      Type: CNAME
      TTL: '300'
      ResourceRecords: [ !GetAtt WebLoadBalancer.DNSName ]
