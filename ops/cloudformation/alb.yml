# To Create ALB Stack:
#    aws cloudformation deploy --stack-name alb                         \
#                           --template-file ops/cloudformation/alb.yml  \
#                           --parameter-overrides                       \
#                             VPCStackName=DevVPC | ProdVPC             \
#                             HostedZoneName=your.hosted.zone.name      \
#                           --tags Key1=Value1 Key2=Value2              \
#                           --region <region>                           \
#                           --profile <profile>
---
  AWSTemplateFormatVersion: "2010-09-09"

  Description: "Creates: ALB Security Group, App Load Balacer,
                ALB Target groups, Record Sets."

  Parameters:
    VPCStackName:
      Type: String
      AllowedValues: [ DevVPC, ProdVPC ]
    IPrange:
      Description: The IP address range that can be used for HTTP and HTTPS
      Type: String
      Default: 0.0.0.0/0
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    InstanceType:
      Type: String
      Description: Type of EC2 instance.
      Default: t2.micro
      AllowedValues: [ t2.micro, t2.small, t2.medium ]
      ConstraintDescription: Must be a valid EC2 instance type.
    HostedZoneName:
      Type: String
      Description: Project hosted zone name.


  Resources:
    ALBSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP and HTTPS access via ports 80 and 443
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref IPrange
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Ref IPrange
        Tags:
          - Key: 'Name'
            Value: 'ALBsg'

    AppLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: 'ipv4'
        Name: 'A3-ALB'
        Scheme: 'internet-facing'
        SecurityGroups:
          - Ref: ALBSecurityGroup
        Subnets:
          - Fn::ImportValue: !Sub '${VPCStackName}-PublicSubnet0'
          - Fn::ImportValue: !Sub '${VPCStackName}-PublicSubnet1'
        Tags:
          - Key: 'Name'
            Value: 'AppLB'

    WebTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: '/'
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 2
        Matcher:
          HttpCode: '200-299'
        Name: tgWeb
        Port: 80
        Protocol: HTTP
        TargetType: instance
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        Tags:
        - Key: 'Name'
          Value: 'tgWeb'
        - Key: 'Port'
          Value: 80

    JenkinsTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: '/'
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 2
        Matcher:
          HttpCode: '200'
        Name: tgJenkins
        Port: 8080
        Protocol: HTTP
        TargetType: instance
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        Tags:
        - Key: 'Name'
          Value: 'tgJenkins'
        - Key: 'Port'
          Value: 8080

    JenkinsListenerRule:
      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref JenkinsTargetGroup
        Conditions:
          - Field: host-header
            HostHeaderConfig:
              Values:
                - !Sub 'ci.${HostedZoneName}'
        ListenerArn: !Ref HttpsListener
        Priority: 1

    HttpListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301
        LoadBalancerArn: !Ref AppLoadBalancer
        Port: 80
        Protocol: HTTP

    HttpsListener:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        Certificates:
          - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/98dbbe8d-d6a8-47c0-ad7a-9a25928a806e"
        DefaultActions:
          - TargetGroupArn: !Ref WebTargetGroup
            Type: forward
        LoadBalancerArn: !Ref AppLoadBalancer
        Port: 443
        Protocol: HTTPS

    MainRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          HostedZoneId: !GetAtt AppLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt AppLoadBalancer.DNSName
        HostedZoneName: !Sub '${HostedZoneName}.'
        Name: !Sub '${HostedZoneName}.'
        Type: A

    WwwRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Sub '${HostedZoneName}.'
        Name: !Sub 'www.${HostedZoneName}.'
        Type: CNAME
        TTL: '300'
        ResourceRecords: [ !GetAtt AppLoadBalancer.DNSName ]

    JenkinsRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Sub '${HostedZoneName}.'
        Name: !Sub 'ci.${HostedZoneName}.'
        Type: CNAME
        TTL: '300'
        ResourceRecords: [ !GetAtt AppLoadBalancer.DNSName ]

  Outputs:
    AppLoadBalancerARN:
      Description: 'ARN of the ALB'
      Value: !Ref AppLoadBalancer
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-ALB-ARN'
    tgWebARN:
      Description: 'ARN of the Target Group Web'
      Value: !Ref WebTargetGroup
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-tgWeb-ARN'
    tgJenkinsARN:
      Description: 'ARN of the Target Group Jenkins'
      Value: !Ref JenkinsTargetGroup
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-tgJenkins-ARN'
