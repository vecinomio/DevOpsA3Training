# To Create ALB Stack:
# aws cloudformation deploy --stack-name alb --template-file ops/cloudformation/alb.yml --parameter-overrides VPCStackName=${VPCStackName} Environment=${Environment} SSLCertificateARN=${SSLCertificateARN}
---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates: ALB Security Group, App Load Balacer,
                Default Target Group, ALB Listeners"

Parameters:

  VPCStackName:
    Type: String
    AllowedValues: [ DevVPC, ProdVPC ]

  Environment:
    Type: String
    Description: Dev or Prod
    AllowedValues: [ Dev, Prod ]

  SSLCertificateARN:
    Type: String
    Description: ARN of existing SSL Certificate.

  BlueWeight:
    Type: String
    Default: 1
    Description: Green target group weight. 100% by default. This parameter is on canary deployment abidance.

  GreenWeight:
    Type: String
    Default: 0
    Description: Green target group weight. 0% by default. This parameter is on canary deployment abidance.

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.

  Priority:
    Type: Number
    Default: 3
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.

Resources:
  ALBSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable HTTP and HTTPS access via ports 80 and 443
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: 'Name'
            Value: 'ALBsg'
          - Key: 'Environment'
            Value: !Ref Environment

  AppLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: 'ipv4'
        Name: 'A3-ALB'
        Scheme: 'internet-facing'
        SecurityGroups:
          - Ref: ALBSecurityGroup
        Subnets:
          - Fn::ImportValue: !Sub '${VPCStackName}-PublicSubnet0'
          - Fn::ImportValue: !Sub '${VPCStackName}-PublicSubnet1'
        Tags:
          - Key: 'Name'
            Value: 'AppLB'
          - Key: 'Environment'
            Value: !Ref Environment

  HttpListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: '443'
              StatusCode: HTTP_301
        LoadBalancerArn: !Ref AppLoadBalancer
        Port: 80
        Protocol: HTTP

  HttpsListener:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        DefaultActions:
          - Type: forward
            ForwardConfig:
              TargetGroups:
              - TargetGroupArn: !Ref TargetGroupBlue
                Weight: !Ref BlueWeight
              - TargetGroupArn: !Ref TargetGroupGreen
                Weight: !Ref GreenWeight
              TargetGroupStickinessConfig:
                Enabled: false
                DurationSeconds: 2000
        LoadBalancerArn: !Ref AppLoadBalancer
        Port: 443
        Protocol: HTTPS

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      Tags:
      - Key: 'Name'
        Value: !Sub 'tg${AWS::StackName}'
      - Key: 'Environment'
        Value: !Ref Environment

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 11
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref HttpsListener
      Priority: !Ref 'Priority'
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroupStickinessConfig:
            Enabled: false
            DurationSeconds: 2000
          TargetGroups:
          - TargetGroupArn: !Ref TargetGroupBlue
            Weight: !Ref BlueWeight
          - TargetGroupArn: !Ref TargetGroupGreen
            Weight: !Ref GreenWeight

Outputs:

    AppLoadBalancerARN:
      Description: 'ARN of the ALB'
      Value: !Ref AppLoadBalancer
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-ALB-ARN'

    AppLoadBalancerSG:
      Description: 'SG of the ALB'
      Value: !Ref ALBSecurityGroup
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-ALBSG-ARN'

    AppLoadBalancerDNSName:
      Description: 'The original DNS Name of the ALB'
      Value: !GetAtt AppLoadBalancer.DNSName
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-ALB-DNSName'

    AppLoadBalancerHTTPSListenerARN:
      Description: 'The ARN of the ALB HTTPS Listener'
      Value: !Ref HttpsListener
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-HttpsListener-ARN'

    HostedZoneID:
      Description: 'The ID of the Hosted Zone associated with the ALB'
      Value: !GetAtt AppLoadBalancer.CanonicalHostedZoneID
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-Associate-HostedZoneID'

    TargetGroupBlue:
      Description: 'ARN of the blue target group'
      Value: !Ref TargetGroupBlue
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-TargetGroupBlue'

    TargetGroupGreen:
      Description: 'ARN of the green target group'
      Value: !Ref TargetGroupGreen
      Export:
        Type: String
        Name: !Sub '${AWS::StackName}-TargetGroupGreen'
