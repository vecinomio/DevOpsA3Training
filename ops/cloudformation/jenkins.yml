# Creates an ASG 1:1 for Jenkins, attaching or creating persistent volume.
#
# aws cloudformation deploy --stack-name Jenkins --template-file ops/cloudformation/jenkins.yml \
#                           --parameter-overrides VPCStackName=${VPCStackName} ALBStackName=${ALBStackName} \
#                                                 HostedZoneName=${HostedZoneName} \
#                                MountScriptVersion=0.0.1 PuppetScriptVersion=0.0.1 Priority=1 \
#                           --capabilities CAPABILITY_IAM
AWSTemplateFormatVersion: '2010-09-09'

Description: "Creates: Jenkins Security Group, Jenkins Role, Jenkins Profile,
              Jenkins LaunchConfig and Jenkins AutoScalingGroup."

Parameters:

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the SSH keypair to use for the EC2 instances.
    Default: devopsa3

  VPCStackName:
    Type: String
    Description: Created VPC stack name.
    MinLength: 1

  ALBStackName:
    Type: String
    Description: Created ALB stack name.
    MinLength: 1

  InstanceType:
    Type: String
    Description: Type of EC2 instance
    Default: t3.small
    ConstraintDescription: Must be a valid EC2 instance type.

  S3Path:
    Type: String
    Description: The S3 path
    Default: devopsa3

  MountScriptVersion:
    Type: String
    Description: Bootstrap script version for mounting volume

  PuppetScriptVersion:
    Type: String
    Description: Bootstrap script version

  Service:
    Type: String
    Description: lifecycle policy tag
    Default: jenkins

  Environment:
    Type: String
    Description: Normally - ci
    Default: ci

  HostedZoneName:
    Type: String
    Description: Project hosted zone name.

  Priority:
    Type: String
    Description: Listener rule priority.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80
    us-west-1:
      AMI: ami-0245d318c6788de52

Resources:
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      GroupDescription: SSH, HTTP
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0

  JenkinsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

      Policies:
        - PolicyName: Jenkins
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplateSummary
                  - iam:CreateInstanceProfile
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRole
                  - iam:GetInstanceProfile
                  - iam:PutRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:PassRole
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:PutScalingPolicy
                  - autoscaling:DeletePolicy
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DeleteLaunchConfiguration
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:DescribeScalingPolicies
                  - application-autoscaling:PutScalingPolicy
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeAddresses
                  - ec2:DescribeKeyPairs
                  - ec2:CreateVolume
                  - ec2:CreateTags
                  - ec2:AttachVolume
                  - ec2:AssociateAddress
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeSecurityGroups
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:DescribeAccountAttributes
                  - ec2:DeleteSecurityGroup
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:CreateTargetGroup
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:CreateRule
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:DeleteRule
                  - elasticloadbalancing:DeleteTargetGroup
                  - route53:ListHostedZones
                  - route53:ChangeResourceRecordSets
                  - route53:GetChange
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecs:RegisterTaskDefinition
                  - ecs:DescribeServices
                  - ecs:CreateService
                  - ecs:DeregisterTaskDefinition
                  - ecs:UpdateService
                  - ecs:DeleteService

  JenkinsProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: JenkinsRole

  JenkinsRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'ci.${HostedZoneName}.'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - Fn::ImportValue: !Sub "${ALBStackName}-ALB-DNSName"

  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/login'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Name: !Sub 'tg${AWS::StackName}'
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
      Tags:
      - Key: 'Name'
        Value: !Sub 'tg${AWS::StackName}'
      - Key: 'Port'
        Value: '8080'
      - Key: 'Environment'
        Value: !Ref Environment

  JenkinsListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'ci.${HostedZoneName}'
      ListenerArn:
        Fn::ImportValue: !Sub "${ALBStackName}-HttpsListener-ARN"
      Priority: !Ref Priority

  JenkinsLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref JenkinsProfile
      KeyName: !Ref KeyPairName
      SecurityGroups:
      - Ref: JenkinsSecurityGroup
      InstanceType: !Ref InstanceType
      AssociatePublicIpAddress: True
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            function retryCommand() {
                local ATTEMPTS="$1"
                local SLEEP="$2"
                local COMMAND="$3"
                for i in $(seq 1 $ATTEMPTS); do
                    [ $i == 1 ] || sleep $SLEEP
                    eval $COMMAND
                    [ $? == 2 -o $? == 0 ] && break
                done
            }
            hostnamectl set-hostname jenkins
            rpm -Uvh https://yum.puppet.com/puppet5-release-el-7.noarch.rpm
            retryCommand 5 10 'yum install -y puppet-agent git docker aws-cli aws-cfn-bootstrap'
            export PATH=$PATH:/opt/aws/bin/:/opt/puppetlabs/bin/:/opt/puppetlabs/puppet/bin/
            retryCommand 5 10  'aws s3 cp "s3://${S3Path}/scripts/puppet-${pupver}.tar" .'
            tar -C /etc/puppetlabs/ -xvf puppet-${pupver}.tar
            retryCommand 5 10 'puppet apply --test /etc/puppetlabs/code/environments/production/manifests/site.pp'
            retryCommand 5 10 'aws s3 cp "s3://${S3Path}/scripts/jenkins/mount_volume-${ver}.sh" - | bash -l -s -- --hostname jenkins'
            usermod -aG docker jenkins
            systemctl enable docker
            systemctl start docker
            systemctl restart jenkins
            sleep 20
            curl -sS http://localhost:8080 | grep 'Authentication required'
            cfn-signal -e $? --stack ${AWS::StackName} --resource JenkinsAutoScalingGroup --region ${AWS::Region}
          - ver: !Ref MountScriptVersion
            pupver: !Ref PuppetScriptVersion

  JenkinsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
      LaunchConfigurationName: !Ref JenkinsLaunchConfig
      MinSize: '1'
      MaxSize: '1'
      TargetGroupARNs:
        - !Ref JenkinsTargetGroup
      Tags:
        - Key: 'Name'
          Value: 'Jenkins'
          PropagateAtLaunch: true
        - Key: 'Environment'
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: 'Service'
          Value: !Ref Service
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT20M"
