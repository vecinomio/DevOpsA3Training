# Creates an ASG 1:1 for Jenkins, attaching or creating persistent volume.
#
# aws cloudformation deploy --template-file ops/cloudformation/jenkins.yml \
#                           --stack-name jenkins \
#                           --parameter-overrides VPCStackName=DevVPC ScriptVersion=0.0.1 \
#                           --capabilities CAPABILITY_IAM
AWSTemplateFormatVersion: '2010-09-09'
Description: "Creates an ASG 1:1 for Jenkins, attaches or creates persistent EBS"

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the SSH keypair to use for the EC2 instances.
    Default: jenkins

  VPCStackName:
    Type: String
    MinLength: 1

  InstanceType:
    Type: String
    Description: Type of EC2 instance
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.

  S3Path:
    Type: String
    Description: The S3 path
    Default: devopsa3

  ScriptVersion:
    Type: String
    Description: Bootstrap script version

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80
    us-west-1:
      AMI: ami-0245d318c6788de52

Resources:
  JenkinsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId:
          Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
        GroupDescription: SSH, HTTP
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

      Policies:
        - PolicyName: EC2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - iam:DeleteRolePolicy
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:PassRole
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:PutScalingPolicy
                  - autoscaling:DeletePolicy
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DeleteLaunchConfiguration
                  - ec2:DescribeTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeAddresses
                  - ec2:DescribeKeyPairs
                  - ec2:CreateVolume
                  - ec2:CreateTags
                  - ec2:AttachVolume
                  - ec2:AssociateAddress
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeSecurityGroups
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:DescribeAccountAttributes
                  - ec2:DeleteSecurityGroup

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: InstanceRole

  SimpleConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroups:
      - Ref: JenkinsSecurityGroup
      InstanceType: !Ref InstanceType
      AssociatePublicIpAddress: True
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            set -o errexit
            set -o nounset
            set -o xtrace
            set -o pipefail
            PATH=$PATH:/opt/aws/bin/
            aws s3 cp "s3://${S3Path}/scripts/jenkins/install_${ver}.sh" - | \
            bash -l -s -- --hostname jenkins
            sleep 1m
            curl -sS http://localhost:8080
            cfn-signal -e $? --stack ${AWS::StackName} \
            --resource MyServerGroup --region ${AWS::Region}
          - ver: !Ref ScriptVersion

  MyServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1"
      LaunchConfigurationName: !Ref SimpleConfig
      MinSize: '1'
      MaxSize: '1'
      TargetGroupARNs:
        - Fn::ImportValue: alb-tgJenkins-ARN
      Tags:
        - Key: 'Name'
          Value: 'Jenkins'
          PropagateAtLaunch: true
        - Key: 'Environment'
          Value: 'CI'
          PropagateAtLaunch: true
        - Key: 'Service'
          Value: 'Jenkins'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT20M"
#    UpdatePolicy:
#      AutoScalingScheduledAction:
#        IgnoreUnmodifiedGroupSizeProperties: 'true'
#      AutoScalingRollingUpdate:
#        MinInstancesInService: '1'
#        WaitOnResourceSignals: 'true'

#  WaitHandle:
#    Type: AWS::CloudFormation::WaitConditionHandle

#  WaitCondition:
#    Type: AWS::CloudFormation::WaitCondition
#    DependsOn: "MyServerGroup"
#    Properties:
#      Handle: !Ref WaitHandle
#      Timeout: "300"
#      Count: 2
