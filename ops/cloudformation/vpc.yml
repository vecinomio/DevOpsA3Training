#---
  AWSTemplateFormatVersion: "2010-09-09"

  Description: "Creates a VPC with Managed NAT"

  Parameters:
    StackName:
      Type: String
      Default: DevVPC
      MinLength: 1

  Mappings:
    SubnetConfig:
      VPC:
        CIDR: "172.16.0.0/16"
      Public0:
        CIDR: "172.16.0.0/24"
      Private0:
        CIDR: "172.16.1.0/24"
      Private1:
        CIDR: "172.16.2.0/24"

    AZRegions:
      us-east-1:
        AZs: ["a", "b"]
      us-west-1:
        AZs: ["a", "b"]

  Resources:

    VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock: !FindInMap [ "SubnetConfig", "VPC", "CIDR" ]
        Tags:
          - Key: "Network"
            Value: "Public"
          - Key: "Name"
            Value: "VPC Public and Private with NAT"


    PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Public0", "CIDR" ]
        MapPublicIpOnLaunch: "true"
        Tags:
          - Key: "Network"
            Value: "Public"
          - Key: "Name"
            Value: "Public"

    PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Private0", "CIDR" ]
        Tags:
          - Key: "Network"
            Value: "Private"
          - Key: "Name"
            Value: "Private0"

    PrivateSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref "VPC"
        AvailabilityZone:
          Fn::Sub:
            - "${AWS::Region}${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
        CidrBlock: !FindInMap [ "SubnetConfig", "Private1", "CIDR" ]
        Tags:
          - Key: "Network"
            Value: "Private"
          - Key: "Name"
            Value: "Private1"

    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          - Key: "Network"
            Value: "Public"

    AttachGateway:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId: !Ref "VPC"
        InternetGatewayId: !Ref "InternetGateway"

    PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref "VPC"
        Tags:
          - Key: "Network"
            Value: "Public"

    PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId: !Ref "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref "InternetGateway"

    PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PublicSubnet0"
        RouteTableId: !Ref "PublicRouteTable"

    PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId: !Ref "VPC"
        Tags:
          - Key: "Network"
            Value: "Public"

    InboundHTTPPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId: !Ref "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

    OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId: !Ref "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"

    PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId: !Ref "PublicSubnet0"
        NetworkAclId: !Ref "PublicNetworkAcl"

    ElasticIP0:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: "vpc"

    NATGateway0:
      Type: "AWS::EC2::NatGateway"
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP0"
            - "AllocationId"
        SubnetId: !Ref "PublicSubnet0"

    PrivateRouteTable0:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref "VPC"

    PrivateRouteToInternet0:
      Type: "AWS::EC2::Route"
      Properties:
        RouteTableId: !Ref "PrivateRouteTable0"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId: !Ref "NATGateway0"

    PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PrivateSubnet0"
        RouteTableId: !Ref "PrivateRouteTable0"

    PrivateSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId: !Ref "PrivateSubnet1"
        RouteTableId: !Ref "PrivateRouteTable0"

  Outputs:

    VPC:
      Description: "VPCId of VPC"
      Value: !Ref "VPC"
      Export:
        Type: String
        Name: !Sub "${AWS::StackName}-VPCId"

    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value: !Ref "PublicSubnet0"
      Export:
        Name: !Sub "${AWS::StackName}-PublicSubnet0"

    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value: !Ref "PrivateSubnet0"
      Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnet0"

    PrivateSubnet1:
      Description: "SubnetId of private subnet 1"
      Value: !Ref "PrivateSubnet1"
      Export:
        Name: !Sub "${AWS::StackName}-PrivateSubnet1"
