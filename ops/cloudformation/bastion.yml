  AWSTemplateFormatVersion: "2010-09-09"

  Description: "Creates resources in Public Subnet 0:
                  Bastion Security Group;
                  Bastion Elastic IP;
                  Bastion DNS Record;
                  Bastion Persistent Volume;
                  Bastion Role with Policies;
                  Bastion Profile;
                  Bastion Launch Configuration:
                    Attaches EIP and EBS to Bastion;
                  Bastion Auto Scaling Group."

  Parameters:
    VPCStackName:
      Type: String
      AllowedValues: [ DevVPC, ProdVPC ]
    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: 'AWS::EC2::KeyPair::KeyName'
      Default: imaki_NVirginia
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    SSHLocation:
      Description: The IP address range that can be used to SSH to the EC2 instances
      Type: String
      Default: 0.0.0.0/0
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    InstanceType:
      Type: String
      Description: Type of EC2 instance.
      Default: t2.micro
      AllowedValues: [ t2.micro, t2.small, t2.medium ]
      ConstraintDescription: Must be a valid EC2 instance type.
    VolumeSize:
      Type: Number
      Description: Volume-size of persistent EBS for Bastion-host in Gb
      Default: 10
    HostedZone:
      Type: String
      Description: Project hosted zone.
      Default: devopsa3.me.uk.

  Mappings:
    RegionMap:
      us-east-1:
        AMI: ami-0080e4c5bc078760e # Amazon Linux 2
      us-west-1:
        AMI: ami-0080e4c5bc078760e # Amazon Linux 2

  Resources:
    BastionSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable SSH access via port 22
        VpcId:
          Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Ref SSHLocation

    BastionEIP:
      Type: 'AWS::EC2::EIP'

    BastionDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Ref 'HostedZone'
        Comment: DNS name for Bastion-host
        Name: !Join ['.', ['bastion', !Ref 'HostedZone']]
        Type: A
        TTL: '60'
        ResourceRecords: [ !Ref BastionEIP ]
      DependsOn: BastionEIP

    BastionVolume:
      Type: AWS::EC2::Volume
      Properties:
        AvailabilityZone: us-east-1a
        Encrypted: No
        Size: !Ref VolumeSize
        Tags:
          - Key: "Name"
            Value: "BastionEBS"
        VolumeType: gp2

    BastionRole:
      Type: AWS::IAM::Role
      Properties:
        Description: Role for Bastion-host. Needs to attaching EBS and
                     associate/disassociate EIP for itself.
        RoleName: "BastionRole"
        Path: "/"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: "Bastion"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Resource: "*"
                  Action:
                    - ec2:AssociateAddress
                    - ec2:DisassociateAddress
                    - ec2:AttachVolume
                    - ec2:DescribeVolumes

    BastionInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - Ref: BastionRole

    LaunchConfig:
      Type: "AWS::AutoScaling::LaunchConfiguration"
      Properties:
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -x
              echo -------------------------START-----------------------------
              INSTANCE_ID=$(curl -s \
                            http://169.254.169.254/latest/meta-data/instance-id)
              ALLOCATION_ID=${Allocation}
              REGION=${DevRegion}
              VOLUME_ID=${Volume}
              VOLUME_DEVICE=/dev/xvdf
              MOUNT_DIR=/bastionData
              function retry_until_available() {
                  until "$@"; do
                      echo "Command failed: $*"
                      sleep 10
                      echo "Retrying."
                  done
              }
              echo ---------------------ASSOCIATING EIP-----------------------
              retry_until_available aws ec2 associate-address --instance-id \
              $INSTANCE_ID --allocation-id $ALLOCATION_ID --region $REGION
              echo ---------------------ATTACHING VOLUME----------------------
              retry_until_available aws ec2 attach-volume --volume-id $VOLUME_ID \
              --instance-id $INSTANCE_ID --device $VOLUME_DEVICE --region $REGION
              echo ---------------------MOUNTING VOLUME-----------------------
              retry_until_available yum install -y xfsprogs
              if [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: cannot \
              open \`$VOLUME_DEVICE' (No such file or directory)" ]]; then
                echo "No such device $VOLUME_DEVICE"
                until [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: data" ]] || \
                [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: SGI XFS \
                filesystem data (blksz 4096, inosz 512, v2 dirs)" ]]; do
                  sleep 3
                  echo "Trying again."
                done
                echo "$VOLUME_DEVICE found"
                if [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: data" ]]; then
                  echo "No FS. Starts to creating FS"
                  retry_until_available mkfs.xfs $VOLUME_DEVICE
                elif [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: SGI XFS \
                filesystem data (blksz 4096, inosz 512, v2 dirs)" ]]; then
                  echo "FS is already exists"
                fi
              elif [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: data" ]]; then
                echo "File System doesn't exists. Starting to create File System"
                retry_until_available mkfs.xfs $VOLUME_DEVICE
              elif [[ $(file -s $VOLUME_DEVICE) = "$VOLUME_DEVICE: SGI XFS filesystem data (blksz 4096, inosz 512, v2 dirs)" ]]; then
                echo "FS is already exists"
              fi
              mkdir $MOUNT_DIR
              mount $VOLUME_DEVICE $MOUNT_DIR
              echo "$VOLUME_DEVICE  $MOUNT_DIR  xfs  defaults,nofail  0  2" \
              >> /etc/fstab
            - Allocation: !GetAtt BastionEIP.AllocationId
              Volume: !Ref BastionVolume
              DevRegion: !Ref "AWS::Region"
        AssociatePublicIpAddress: "true"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile: !Ref BastionInstanceProfile
        SecurityGroups:
          - !Ref BastionSecurityGroup
      DependsOn: BastionVolume

    BastionAutoScalingGroup:
      Type: "AWS::AutoScaling::AutoScalingGroup"
      Properties:
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
        LaunchConfigurationName: !Ref LaunchConfig
        MinSize: "1"
        MaxSize: "1"
        DesiredCapacity: "1"
        Tags:
          - Key: "Name"
            Value: "bastion-ASG"
            PropagateAtLaunch: true


  Outputs:
    BastionIPAddress:
      Description: EIP address of the Bastion-host instance
      Value: !Ref BastionEIP
    BastionVolume:
      Description: ID of the Persistent Volume for Bastion-host instance
      Value: !Ref BastionVolume
