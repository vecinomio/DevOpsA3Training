# For manual creation/update use:
# aws cloudformation deploy --stack-name webserversASG --template-file ops/cloudformation/webservers.yml --parameter-overrides VPCStackName=${VPCStackName} Environment=${Environment} HostedZoneName=${HostedZoneName} PuppetScriptVersion=0.0.1 --capabilities CAPABILITY_NAMED_IAM
---
AWSTemplateFormatVersion: "2010-09-09"

Description: "ASG for private subnet."

Parameters:
  VPCStackName:
    Type: String
    AllowedValues: [ DevVPC, ProdVPC ]
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: devopsa3
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Type: String
    Description: Type of EC2 instance.
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.
  WebserverCapacity:
    Description: The number of ec2 instances will be runned into ASG
    Type: String
    Default: "2"
    ConstraintDescription: Must be positive integer or zero
  HostedZoneName:
    Type: String
    Description: Project hosted zone name.
  Environment:
    Type: String
    Description: Dev or Prod
    AllowedValues: [ Dev, Prod ]
  ImageTag:
    Type: String
    Description: Docker Image Tag version

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b69ea66ff7391e80 # Amazon Linux 2
    us-west-1:
      AMI: ami-0245d318c6788de52 # Amazon Linux 2

Resources:
  webserversSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP, HTTPS, SSH access
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "webserversSG"

  webserversRole:
    Type: AWS::IAM::Role
    Description: "Service account custom role for using additional AWS resources"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: webserversPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:GetObject
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage

  webserversRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "webserversProfile"
      Path: "/"
      Roles:
        - !Ref webserversRole

  WebserversTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Name: tgWebservers
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Sub '${VPCStackName}-VPCId'
      Tags:
      - Key: 'Name'
        Value: 'tgWebservers'
      - Key: 'Port'
        Value: 8080
      - Key: 'Environment'
        Value: !Ref Environment

  appRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'app.${HostedZoneName}.'
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - Fn::ImportValue: alb-ALB-DNSName

  appListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebserversTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub 'app.${HostedZoneName}'
      ListenerArn: !ImportValue alb-HttpsListener-ARN
      Priority: 3

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          function retryCommand() {
              local ATTEMPTS="$1"
              local SLEEP="$2"
              local COMMAND="$3"
              for i in $(seq 1 $ATTEMPTS); do
                  [ $i == 1 ] || sleep $SLEEP
                  eval $COMMAND && echo $? && return 0 || echo $?
              done
              return 1
          }
          hostnamectl set-hostname webserver
          retryCommand 5 10 'amazon-linux-extras install docker'
          systemctl start docker
          usermod -a -G docker ec2-user
          $(aws ecr get-login --no-include-email --region us-east-1)
          docker run -d -p 8080:8080 054017840000.dkr.ecr.us-east-1.amazonaws.com/snakes:${tagVersion}
          sleep 20
          curl -sS http://localhost:8080 | grep 'Does it have snakes?'
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource webserversASG --region ${AWS::Region}
        - tagVersion: !Ref ImageTag
      AssociatePublicIpAddress: "false"
      IamInstanceProfile: !Ref webserversRoleProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref webserversSecurityGroup

  webserversASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: webserversASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: !Ref WebserverCapacity
      TargetGroupARNs:
        - !Ref WebserversTargetGroup
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet0"
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1"
      Tags:
        - Key: "Name"
          Value: "webserverASG"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebserverCapacity
        Timeout: "PT20M"
